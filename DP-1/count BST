/*Count BSTs

Given an integer N, find and return the count of unique Binary search trees (BSTs) are possible with nodes valued from 1 to N.
Output count can be very large, so return the count modulo 10^9+7.
Input Format :
Integer n 
Output Format :
Count of BSTs
Contraints :
1<= N <=1000
Sample Input 1:
8
Sample Output 1:
1430
Sample Input 2:
3
Sample Output 2:
5

*/

#include<bits/stdc++.h>
using namespace std;
  int m=pow(10,9)+7;
long long result(int n,long long* output)
{
    long long value=0;
  
    
    if(n==0)
    {
        return 1;
    }
    if(n==1)
    {
        return 1;
    }
   for(int k=1;k<=n;k++)
   {
       if(output[k-1]== -1)
       {
           output[k-1]=(result(k-1,output))%m;
       }
       if(output[n-k]== -1)
       {
          output[n-k]=(result(n-k,output))%m;
       }
       value=((value%m)+(output[k-1]*output[n-k])%m)%m;
   }
    
    
    
    return value;
}

int countBST( int n)
{
  /* Don't write main().
     * Don't read input, it is passed as function argument.
     * Return output and don't print it.
     * Taking input and printing output is handled automatically.
     */
    
long long* output=new long long[n+1];
   for(int i=0;i<=n;i++)
   {
       output[i]=-1;
   }
    long long ans=result(n,output)%m;
    
    return (int)ans;
}

