Number Of Factors
Send Feedback
A number is called n-factorful if it has exactly n distinct prime factors. Given positive integers a, b, and n, your task is to find the number of integers between a and b, inclusive, that are n-factorful. We consider 1 to be 0-factorful.
Input
Your input will consist of a single integer T followed by a newline and T test cases. Each test cases consists of a single line containing integers a, b, and n as described above.
Output
Output for each test case one line containing the number of n-factorful integers in [a, b].
Constraints
T < 10000

1 ≤ a ≤ b ≤ 10^6

0 ≤ n ≤ 10
Sample Input
5
1 3 1
1 10 2
1 10 3
1 100 3
1 1000 0
Sample Output
2 
2
0
8
1

#include<iostream>
#include<bits/stdc++.h>
using namespace std;
int MAX =1000002;
int prime[1000002];
long long factor[12][1000002];
void precompute()
{
    for(int i=0;i<12;i++)
    {
        for(int j=0;j<MAX;j++)
        {
            factor[i][j]=0;
        }
    }
    for(int i=0;i<MAX;i++)
    {
        prime[i]=0;
    }
    for(int i=2;i<MAX/2;i++)
    {
        if(prime[i]==0)
        {
            
            for(int j=i;j<MAX;j+=i)
            {
                prime[j]+=1;
            }
        }
    }
    for(int i=1;i<=10;i++)
    {
        factor[i][1]=0;
        for(int j=1;j<MAX;j++)
        {
            if(prime[j]==i)
            {
                factor[i][j]=factor[i][j-1]+1;
            }
            else{
                factor[i][j]=factor[i][j-1];
            }
        }
    }
    
}

int main(){
	// Write your code here
    precompute();
    int t;
    cin>>t;
    while(t--)
    {
         long long a, b, n;
        cin >> a >> b >> n;
        long long total = 0;
        
        for(int i = a; i <= b; i++){
            if(prime[i] == n) 
                total++;
        }

        cout << total << endl;
    }
	return 0;
}
