/*Minimum Count

Given an integer N, find and return the count of minimum numbers, sum of whose squares is equal to N.
That is, if N is 4, then we can represent it as : {1^2 + 1^2 + 1^2 + 1^2} and {2^2}. Output will be 1, as 1 is the minimum count of numbers required.
Note : x^y represents x raise to the power y.
Input Format :
Integer N
Output Format :
Required minimum count
Constraints :
1 <= N <= 1000
Sample Input 1 :
12
Sample Output 1 :
3
Sample Output 1 Explanation :
12 can be represented as :
1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1
1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 2^2
1^1 + 1^1 + 1^1 + 1^1 + 2^2 + 2^2
2^2 + 2^2 + 2^2
As we can see, the output should be 3.
Sample Input 2 :
9
Sample Output 2 :
1
*/


#include<bits/stdc++.h>
using namespace std;
int result(int n,int dp[])
{
     if(sqrt(n)-floor(sqrt(n))==0)   //if perfect square
    {
        return 1;
    }
    if(n<=3)
    {
        return n;    //if n is less than or equal to 3,no other case is possible
    }
    if(dp[n]!=-1)
    {
        return dp[n];
    }
    else{
    int res=n;
    for(int i=1;i<=n;i++)
    {
        int temp=i*i;
        if(temp>n)
        {break;
         }
        else{
            res=min(res,1+result(n-temp,dp));
        }
        
    }
        dp[n]=res;
    return res;
    }
}
int minCount(int n){
    
    /*  Don't write main().
     *  Don't read input, it is passed as function argument.
     *  Return output and don't print it.
     *  Taking input and printing output is handled automatically.
     */
    int dp[n+1];
    for(int i=0;i<=n;i++)
    {
        dp[i]=-1;
    }
    int answer=result(n,dp);
    return answer;
   
    
}
