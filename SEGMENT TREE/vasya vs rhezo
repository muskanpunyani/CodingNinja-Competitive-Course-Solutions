Vasya vs Rhezo
Send Feedback
Queen Vasya is preparing for a war against Rhezo. She has N warriors in total arranged in a line. Let us number the warriors by numbers from 1 to N. She will fight Rhezo's army for Q days, and each day she can choose only one warrior.
For each warrior, we know 2 values associated with him, let us call these A and B. Each day Vasya can choose her warrior from a range Li to Ri, she must choose the warrior with maximum A value. If there is more than 1 warrior having the same maximum A value, she chooses the warrior with minimum B value. If still there is more than 1 warrior with same maximum A value and same minimum B value, she chooses the one with lower index in line.
You being the hand of Queen Vasya, need to help her in choosing the warrior for each day.
Input:
First line contains a single integer N, denoting the number of warriors Queen Vasya has. 
Second line contains N space separated integers Ai. Third line contains N space separated integers Bi.
Next line contains a single integer Q, denoting the number of days Queen Vasya chooses a warrior. 
Each of the next Q lines contains 2 integers Li and Ri.
Output:
For each Li and Ri, print the index of the warrior that Queen Vasya should choose.
Constraints:
1≤ N,Q ≤10^6
1≤ Ai,Bi ≤10^9
1≤Li≤Ri
Sample Input
5
1 8 4 6 8
4 8 6 3 7
4
1 4
2 4
3 4
1 5
Sample Output
2
2
4
5

#include<bits/stdc++.h>
using namespace std;
 
#define all(C) C.begin(),C.end()
#define csize(C) int(C.size())
typedef long long int Long;
typedef long double Double;
const int MAXN = 1e6 + 1;
const int MAXLG = log2(MAXN) + 1;
 
struct Warrior {
  int a, b, i;
  Warrior() {}
  bool operator<(const Warrior &o) const {
    // this < o
    // =>
    // o > this
 
    if(o.a != a) {
      return o.a > a;
    }
    if(o.b != b) {
      return o.b < b;
    }
    return o.i < i;
  }
};
 
int n, q, L, R;
Warrior T[MAXLG][MAXN];
 
void build_sparse_table() {
  for(int j = 1; j < MAXLG; ++j)
    for(int i = 1; i + (1 << (j - 1)) <= n; ++i)
      T[j][i] = max(T[j - 1][i], T[j - 1][i + (1 << (j - 1))]);
}
 
Warrior get(int L, int R) {
  int k = (int) log2(R - L + 1);
  return max(T[k][L], T[k][R - (1 << k) + 1]);
}
 
int main() {
  scanf("%d", &n);
  for(int i = 1; i <= n; ++i) {
    scanf("%d", &T[0][i].a);
  }
  for(int i = 1; i <= n; ++i) {
    scanf("%d", &T[0][i].b);
    T[0][i].i = i;
  }
 
  build_sparse_table();
 
  scanf("%d", &q);
  while(q--) {
    scanf("%d%d", &L, &R);
    printf("%d\n", get(L, R).i);
  }
  
  return 0;
}

