Roy and Coin Boxes
Send Feedback
Roy has N coin boxes numbered from 1 to N.
Every day he selects two indices [L,R] and adds 1 coin to each coin box starting from L to R (both inclusive).
He does this for M number of days.

After M days, Roy has a query: How many coin boxes have atleast X coins.
He has Q such queries.
Input
First line contains N - number of coin boxes.
Second line contains M - number of days. Each of the next M lines consists of two space separated integers L and R. Followed by integer Q - number of queries.
Each of next Q lines contain a single integer X.a
Output
For each query output the result in a new line.
Constraints
1 ≤ N ≤ 1000000

1 ≤ M ≤ 1000000

1 ≤ L ≤ R ≤ N

1 ≤ Q ≤ 1000000

1 ≤ X ≤ N
Sample Input
7
4
1 3
2 5
1 2
5 6
4
1
7
4
2
Sample Output
6
0
0
4

#include <bits/stdc++.h>
using namespace std;

int main()
{
    int n;
    cin>>n;
    int m;
    cin>>m;
    int arr[m+1][3];
    for(int i=1;i<=m;i++)
    {
        for(int j=1;j<=2;j++ )
        {
            cin>>arr[i][j];
        }
    }
    int q;
    cin>>q;
    int query[q+1];
   for(int i=1;i<=n;i++)
   {
       cin>>query[i];
       
   }
    int start[n+1];
    memset(start,0,sizeof(start));
    int end[n+1];
    memset(end,0,sizeof(end));
    for(int i=1;i<=m;i++)
    {
        int g=arr[i][1];
        start[g]=start[g]+1;
    }
    for(int i=1;i<=m;i++)
    {
        int d=arr[i][2];
        end[d]=end[d]+1;
    }
    int box[n+1];
    memset(box,0,sizeof(box));
    box[1]=start[1];
    for(int i=2;i<=n;i++)                  //number of coin in i boxes
    {
        box[i]=start[i]-end[i-1]+box[i-1];
    }
    int coin[n+1];
    memset(coin,0,sizeof(coin));
    for(int i=1;i<=n;i++)               //no of boxes for i coin;
    {
        coin[box[i]]++;
    }
    int dp[n+1];
    memset(dp,0,sizeof(dp));
    dp[n]=coin[n];
    for(int i=n-1;i>=0;i--)               //array with atleast number
    {
        dp[i]=dp[i+1]+coin[i];
        
    }
    for(int i=1;i<=q;i++)
    {
        cout<<dp[query[i]]<<endl;
    }
    
    
    
    return 0;
}
